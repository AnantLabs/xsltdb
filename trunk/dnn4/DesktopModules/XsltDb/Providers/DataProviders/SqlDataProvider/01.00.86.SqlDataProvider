alter table {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs] add Name nvarchar(128);
go


alter procedure {databaseOwner}[{objectQualifier}Findy_XsltDb_Select]
	@ModuleID int
as
begin
	select c.XSLT, c.Draft, c.IsSuper, c.Name
	from {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs] c
	join {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules] m
		on m.ConfigID = c.ConfigID
	where m.ModuleID = @ModuleID;
end;
go


alter procedure {databaseOwner}[{objectQualifier}Findy_XsltDb_Select_AllForTab]
	@TabID int
as
begin
	select distinct m.ModuleID, c.XSLT, c.Draft, c.IsSuper, c.Name
	from {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules] m
	join {databaseOwner}[{objectQualifier}TabModules] tm on tm.ModuleID = m.ModuleID
	join {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs] c on c.ConfigID = m.ConfigID
	where tm.TabID = @TabID;
end;
go


alter procedure {databaseOwner}[{objectQualifier}Findy_XsltDb_Save]
	@ModuleID int,
	@IsSuper bit,
	@xslt nvarchar(max),
	@name nvarchar(max)
as
begin
	if exists (select * from {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules] where ModuleID = @ModuleID)
		update {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs] set
			Draft = @xslt,
			IsSuper = @IsSuper,
			Name = @name
		where ConfigID = (select ConfigID from {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules] where ModuleID = @ModuleID)
	else
	begin
		declare @ConfigID uniqueidentifier;
		set @ConfigID = NEWID();
		insert {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs](ConfigID, IsSuper, XSLT, Draft, Name) values(@ConfigID, @IsSuper, @xslt, @xslt, @name);
		insert {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules](ModuleID, ConfigID) values(@ModuleID, @ConfigID);
	end;
end;
go

if OBJECT_ID('{databaseOwner}[{objectQualifier}Findy_XsltDb_Publish]') is not null
	drop procedure {databaseOwner}[{objectQualifier}Findy_XsltDb_Publish]
go

create procedure {databaseOwner}[{objectQualifier}Findy_XsltDb_Publish]
	@ModuleID int
as
begin
	update {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs]
	set XSLT = Draft
	from {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs] c
	join {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules] m on m.ConfigID = c.ConfigID
	where m.ModuleID = @ModuleID;
end;
go


alter procedure {databaseOwner}[{objectQualifier}Findy_Xsltdb_ImportModule]
	@ModuleID int,
	@data nvarchar(max)
as
begin
	declare @xml xml;
	set @xml = @data;
	
	declare @ConfigID uniqueidentifier;
	declare @xslt nvarchar(max);
	declare @draft nvarchar(max);
	declare @IsSuper bit;
	
	select
		@ConfigID = x.value('ConfigID[1]', 'uniqueidentifier'),
		@xslt = x.value('XSLT[1]', 'nvarchar(max)'),
		@draft = x.value('Draft[1]', 'nvarchar(max)'),
		@IsSuper = x.value('IsSuper[1]', 'bit')
	from @xml.nodes('/xsltdb') t(x);

	delete {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules]
	where ModuleID = @ModuleID;

	if @ConfigID is not null begin

		if @IsSuper = 1 begin
			-- Ensure Superconfigutation exists.
			select @ConfigID = ConfigID from {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs] where ConfigID = @ConfigID;

		end else begin

			set @ConfigID = NEWID();
			insert {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs](ConfigID, IsSuper, XSLT, Draft)
			values(@ConfigID, @IsSuper, @xslt, @draft);

		end;
		
		if @ConfigID is not null begin

			insert {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules](ModuleID, ConfigID)
			values (@ModuleID, @ConfigID);

		end;

	end;
end;
go


alter procedure {databaseOwner}[{objectQualifier}Findy_XsltDb_GetAllConfigs]
as
begin
	select c.ConfigID, c.Name, COUNT(*) TotalUsage
	from {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs] c
	left join {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules] m on m.ConfigID = c.ConfigID
	where c.IsSuper = 1
	group by c.ConfigID, c.Name;
end;
go


alter trigger {databaseOwner}[{objectQualifier}Findy_XsltDb_DeleteModule]
	on {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules] after delete as
begin
	
	delete {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs]
	where (IsSuper = 0 or IsSuper is null)
	and not exists(
		select * from {databaseOwner}[{objectQualifier}Findy_XsltDb_Modules] m
		where m.ConfigID = {databaseOwner}[{objectQualifier}Findy_XsltDb_Configs].ConfigID);
end;
go

